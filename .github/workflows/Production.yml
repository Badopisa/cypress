name: 'Production CICD'

on:
  push:
    branches:
    - production
  pull_request:

permissions:
  contents: read

jobs:
    build: 
      name: Build
      runs-on: ubuntu-latest
      steps: 
      - 
        uses: actions/checkout@v2
        with: 
          fetch-depth: 0
      
      - name: Setup Nodejs14
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      
      - name: Install Test/Coverage Dependencies
        run: |
          yarn install
      
#       - name: Test with mocha
#         env:
#           JWT_SECRETE_KEY: "${{ secrets.JWT_SECRETE_KEY }}"
#           AWS_ACCESS_KEY_ID:  "${{ secrets.AWS_ACCESS_KEY_ID }}"
#           AWS_SECRET_ACCESS_KEY:  "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
#           AWS_REGION: "${{ secrets.AWS_REGION }}"
#         run: |
#           yarn test
      - 
        env: 
          SONAR_HOST_URL: "${{ secrets.SONAR_HOST_URL }}"
          SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"
          

        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.verbose=true
            
      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
#       - 
#         env: 
#           SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"
#         timeout-minutes: 240
#         uses: sonarsource/sonarqube-quality-gate-action@master
        
    push_to_registry:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: build
      steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: parallelscore/sonalysis-web
      
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            "DB_HOST=${{ secrets.DB_HOST }}"
            "DB_PORT=${{ secrets.DB_PORT }}"
            "DB_USER=${{ secrets.DB_USER }}"
            "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
            "DB_NAME=${{ secrets.DB_NAME }}"
            "PORT=${{ secrets.PORT }}"
            "NODE_ENV=${{ secrets.NODE_ENV }}"
    
    
    Provision_and_deploy:
      name: 'Terraform'
      runs-on: ubuntu-latest
      needs: [build, push_to_registry]
      environment: development

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
      defaults:
        run:
          shell: bash

      steps:
    # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          token: ${{ secrets.TF_API_TOKEN }}
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}
          terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        env: 
          # SPACES_ACCESS_KEY_ID: ${{ secrets.ACCESS_ID }}
           DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.TF_API_TOKEN }}
        # run: terraform init -backend-config="access_key=$SPACES_ACCESS_KEY_ID"  -backend-config="secret_key=$SPACES_SECRET_ACCESS_KEY" 
        run: terraform init -backend-config="token=${{ secrets.TF_TOKEN }}" -backend-config="organization=Parallelscore"
      
    # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true
      
    # Generates an execution plan for Terraform
      - name: Terraform Plan
        env: 
           DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: terraform plan -input=false 

      # On push to master, build or change infrastructure according to Terraform configuration files
      # required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        env: 
           DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.TF_API_TOKEN }}
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
      
  #job_two:
  #    name: Deploy
  #    runs-on: ubuntu-latest
  #    steps:
      - name: Terraform Output
        run: terraform output 
   # - name: Set the value
   #   id: step_one
   #   run: |
   #      echo SSH_HOST=${{ steps.terraform.outputs.droplet_ip_addresses  }} >> $GITHUB_ENV
   #      echo ${{ env.SSH_HOST }}
      - name: Set the value
        run: |
           echo SSH_HOST=$( terraform output -json droplet_ip_addresses | jq '."sonalysis-0"' ) >> $GITHUB_ENV
           echo ${{ env.SSH_HOST }}
      - name: runner
        run: echo ${{ env.SSH_HOST }}
      
      
      - name: ssh deployment
        uses: fifsky/ssh-action@master
        with:
            host: ${{ env.SSH_HOST }}
            user: ${{secrets.SSH_USERNAME}}
            key: ${{secrets.SSH_KEY}}
            port: ${{secrets.SSH_PORT}}
            script: |
              mkdir -p /var/www/sonalysis_backend/sonalysis_service_v2
              cd /var/www/sonalysis_backend/sonalysis_service_v2
              
              # Install docker on the server
              sudo apt-get update
              sudo apt-get install \
              ca-certificates \
              curl \
              gnupg \
              lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo systemctl start docker
              # Stop all running Docker Containers
              docker kill $(docker ps -q)
              
              # Login to Dockerhub Container Registry
              docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
              
              # Pull the Docker Image 
              docker pull parallelscore/sonalysis-service-api:staging
              
              # Run a new container from a new image
              docker run -d -p 3001:3001 -t parallelscore/sonalysis-service-api:staging
