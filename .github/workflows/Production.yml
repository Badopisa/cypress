name: 'Production CICD'

on:
  push:
    branches:
    - main
  pull_request:

permissions:
  contents: read

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Nodejs14
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install Test/Coverage Dependencies
        run: |
          yarn install
      - name: Test with jest
        env:
          NEXT_PUBLIC_API_URL: '${{ secrets.NEXT_PUBLIC_API_URL }}'
        run: |
          yarn test --coverage
      - env:
          SONAR_HOST_URL: '${{ secrets.SONAR_HOST_URL }}'
          SONAR_TOKEN: '${{ secrets.SONAR_TOKEN }}'
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.verbose=true
#       - env:
#           SONAR_TOKEN: '${{ secrets.SONAR_TOKEN }}'
#         timeout-minutes: 240
#         uses: sonarsource/sonarqube-quality-gate-action@master
        
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: parallelscore/sonalysis-web
      
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
    
  Provision:
      name: 'Terraform'
      runs-on: ubuntu-latest
      needs: [build, push_to_registry]
      environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
      defaults:
        run:
          shell: bash

      steps:
    # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          token: ${{ secrets.TF_TOKEN }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        env: 
         SPACES_ACCESS_KEY_ID: ${{ secrets.ACCESS_ID }}
         SPACES_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
         DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: terraform init -backend-config="access_key=$SPACES_ACCESS_KEY_ID"  -backend-config="secret_key=$SPACES_SECRET_ACCESS_KEY"
      
    # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true
      
    # Generates an execution plan for Terraform
      - name: Terraform Plan
        env: 
         SPACES_ACCESS_KEY_ID: ${{ secrets.ACCESS_ID }}
         SPACES_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
         DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: terraform plan -input=false 

      # On push to master, build or change infrastructure according to Terraform configuration files
      # required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        env: 
           DIGITALOCEAN_ACCESS_TOKEN: ${{ secrets.TF_API_TOKEN }}
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
      
  deploy:
    name: 'Deploy'
    needs: [build, push_to_registry, Provision]
    environment: production
    # The type of runner that the job will run on.
    runs-on: ubuntu-latest
    
    
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
    - name: Checkout master
      uses: actions/checkout@main

    # Install doctl.
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.TF_API_TOKEN }}

    - name: Log in to Docker Hub
      uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}


    # Deploy to DigitalOCcean Kubernetes.
   
#     - name: Save DigitalOcean kubeconfig with short-lived credentials
#       run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 sonalysis-k8s-1-22-8-do

#     - name: Deploy to DigitalOcean Kubernetes
#       run: kubectl apply -f $GITHUB_WORKSPACE/SonalysisAI/deployment.yml

#     - name: Verify deployment
#       run: kubectl rollout status deployment/new-aimaster    

  

 

   
